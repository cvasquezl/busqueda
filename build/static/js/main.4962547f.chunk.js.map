{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["URL","process","App","useState","busquedas","setBusquedas","buscarC","setBuscarC","buscarI","setBuscarI","buscarR","setBuscarR","filtro","e","filter","busqueda","CIUDAD","toLowerCase","indexOf","IATA","REGION","useEffect","getBusquedas","a","axios","get","res","data","className","href","placeholder","value","onChange","target","onKeyUp","onClick","map","item","key","_id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAKMA,EAAMC,iCAsKGC,EApKH,WAAO,IAAD,EAEoBC,mBAAS,IAF7B,mBAERC,EAFQ,KAEGC,EAFH,OAOgBF,mBAAS,IAPzB,mBAORG,EAPQ,KAOCC,EAPD,OAQgBJ,mBAAS,IARzB,mBAQRK,EARQ,KAQCC,EARD,OASgBN,mBAAS,IATzB,mBASRO,EATQ,KASCC,EATD,OAUYR,mBAAS,IAVrB,6BAiBlB,SAASS,EAAQC,GACf,OAAQA,GACN,IAAK,IACH,OAAOT,EAAUU,QAAO,SAACC,GAAD,OACrBA,EAASC,OAAOC,cAAcC,QAAQZ,EAAQW,gBAAkB,KACrE,IAAK,IACH,OAAOb,EAAUU,QAAO,SAACC,GAAD,OACrBA,EAASI,KAAKF,cAAcC,QAAQV,EAAQS,gBAAkB,KACnE,IAAK,IACH,OAAOb,EAAUU,QAAO,SAACC,GAAD,OACrBA,EAASK,OAAOH,cAAcC,QAAQR,EAAQO,gBAAkB,MAdvEI,qBAAU,WACVC,MACA,IAkBF,IAsBMA,EAAY,uCAAG,4BAAAC,EAAA,sEACCC,IAAMC,IAAIzB,GADX,OACX0B,EADW,OAEjBrB,EAAaqB,EAAIC,MAFA,2CAAH,qDA0ChB,OACE,yBAAKC,UAAU,wBAEd,yBAAKA,UAAU,wDACb,uBAAGA,UAAU,yBAAyBC,KAAK,KAA3C,oBAIF,yBAAKD,UAAU,OAEb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,gBAAd,iBAEA,2BACIA,UAAU,oBAAoBE,YAAY,SAASC,MAAOzB,EAC1D0B,SAAU,SAACnB,GAAD,OAAON,EAAWM,EAAEoB,OAAOF,QACrCG,QApEK,SAACrB,GACfR,EAAaO,EAAO,SAqEd,4BACIgB,UAAU,kBACVO,QA/EE,WACdb,IACAf,EAAW,IACXE,EAAW,IACXE,EAAW,MAyEH,YAIH,yBAAKiB,UAAU,YACb,wBAAIA,UAAU,gBAAd,eAEA,2BACIA,UAAU,oBAAoBE,YAAY,OAAOC,MAAOvB,EACxDwB,SAAU,SAACnB,GAAD,OAAOJ,EAAWI,EAAEoB,OAAOF,QACrCG,QA7EK,SAACrB,GACfR,EAAaO,EAAO,UA+EjB,yBAAKgB,UAAU,YACb,wBAAIA,UAAU,gBAAd,iBAEA,2BACIA,UAAU,oBAAoBE,YAAY,SAASC,MAAOrB,EAC1DsB,SAAU,SAACnB,GAAD,OAAOF,EAAWE,EAAEoB,OAAOF,QACrCG,QAnFK,SAACrB,GACfR,EAAaO,EAAO,WAuFnB,yBAAKgB,UAAU,aACTxB,EAAUgC,KAAI,SAAAC,GAAI,OACnB,yBAAKC,IAAKD,EAAKE,IAAMX,UAAU,YAC7B,yBAAKA,UAAU,2DACZ,sCAAYS,EAAKrB,QACjB,oCAAUqB,EAAKlB,MACf,sCAAYkB,EAAKjB,gBC5IZoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4962547f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; //npm i axios\n\n\n\nconst URL = process.env.REACT_APP_URI  //variable de entorno  \n\nconst App = () => {\n \n  const [ busquedas, setBusquedas ] = useState([])\n/*   const [ id, setId ] = useState('')\n  const [ ciudad, setCiudad ] = useState('')\n  const [ iata, setIata ] = useState('')\n  const [ region, setRegion ] = useState('') */\n  const [ buscarC, setBuscarC ] = useState('')\n  const [ buscarI, setBuscarI ] = useState('')\n  const [ buscarR, setBuscarR ] = useState('')\n  const [ texto, setTexto ] = useState('')\n/*   const [ bandera, setBandera ] = useState(true) */\n\n  useEffect(() => {\n  getBusquedas()\n},[])\n\nfunction filtro (e){\n  switch (e) {\n    case \"c\":\n      return busquedas.filter((busqueda) =>\n         busqueda.CIUDAD.toLowerCase().indexOf(buscarC.toLowerCase()) > -1)\n    case \"i\":\n      return busquedas.filter((busqueda) =>\n         busqueda.IATA.toLowerCase().indexOf(buscarI.toLowerCase()) > -1)\n    case \"r\":\n      return busquedas.filter((busqueda) =>\n         busqueda.REGION.toLowerCase().indexOf(buscarR.toLowerCase()) > -1)\n    default:\n      break;\n  }    \n}\n\nconst getfiltro = async () =>{\n  const res = await axios.get(URL+'/'+texto)\n  setBusquedas(res.data)\n}\n\nconst refresh = () =>{\n  getBusquedas()\n  setBuscarC('')\n  setBuscarI('')\n  setBuscarR('')\n}\n\nconst buscandoC = (e) => {\n    setBusquedas(filtro(\"c\"))\n}\nconst buscandoI = (e) => {\n    setBusquedas(filtro(\"i\"))\n}\nconst buscandoR = (e) => {\n    setBusquedas(filtro(\"r\"))\n}\n\nconst getBusquedas = async () => {\n    const res = await axios.get(URL) \n    setBusquedas(res.data) \n}\n\n// const addLibro = async () => {\n//     let obj = { nombre, edicion } \n//     const res = await axios.post(URL, obj) \n//     console.log(res.data)\n//     setNombre('')\n//     setEdicion('')\n// }  \n\n// const deleteLibro = async (id) => {\n//     const res = await axios.delete(URL+'/'+id)\n//     console.log(res.data)\n//     getLibros()\n// }\n\n// const getLibro = async (id) => {\n//     const res = await axios.get(URL+'/obtener/'+id)\n//     setId(res.data._id)\n//     setNombre(res.data.nombre)\n//     setEdicion(res.data.edicion)\n//     setBandera(false)\n// }\n\n// const addOrUpdateLibro = () => {\n//     bandera? addLibro() : update()   \n// }\n\n// const update = async () => {\n//     const obj = { id, nombre, edicion }\n//     const res = await axios.put(URL, obj)\n//     console.log(res.data)\n//     setBandera(true)\n//     setNombre('')\n//     setEdicion('')\n//     getLibros()\n// }\n\n\n  return (\n    <div className=\"container bg-success\">   \n\n     <nav className=\"navbar navbar-dark bg-primary justify-content-center\">\n       <a className=\"navbar-brand text-dark\" href=\"/\">Consulta de Geo\n      </a>\n    </nav>\n\n     <div className=\"row\">\n\n       <div className=\"col-md-4\"> \n         <h1 className=\"text-primary\">Buscar Ciudad</h1>\n         \n         <input\n             className=\"form-control mb-2\" placeholder=\"Ciudad\" value={buscarC}\n             onChange={(e) => setBuscarC(e.target.value)}\n             onKeyUp={buscandoC} \n          />\n          <button \n              className=\"btn btn-primary\" \n              onClick={refresh}>REFRESH</button>\n        </div>\n       <div className=\"col-md-4\"> \n         <h1 className=\"text-primary\">Buscar IATA</h1>\n         \n         <input\n             className=\"form-control mb-2\" placeholder=\"Iata\" value={buscarI}\n             onChange={(e) => setBuscarI(e.target.value)}\n             onKeyUp={buscandoI} \n          />\n        </div>\n       <div className=\"col-md-4\"> \n         <h1 className=\"text-primary\">Buscar Region</h1>\n         \n         <input\n             className=\"form-control mb-2\" placeholder=\"Region\" value={buscarR}\n             onChange={(e) => setBuscarR(e.target.value)}\n             onKeyUp={buscandoR} \n          />\n        </div>\n     </div>\n     \n     <div className=\"row mt-4 \">   \n         { busquedas.map(item => (\n          <div key={item._id}  className=\"col-md-4\">\n            <div className=\"card p-3 m-2 border-primary bg-secondary bg-transparent\">\n               <p>Ciudad: {item.CIUDAD}</p>\n               <p>IATA: {item.IATA}</p>  \n               <p>Region: {item.REGION}</p>  \n               {/* <div className=\"d-flex flex-row-reverse\">\n               <button \n                 className=\"btn btn-danger\" \n                 onClick={() => deleteLibro(item._id)}>DELETE</button> \n               <button \n                 className=\"btn btn-success mr-2\" \n                 onClick={() => getLibro(item._id)}>UPDATE</button> \n                 </div>   */}\n            </div>\n          \n          </div>\n\n        ))} \n        </div> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}